Вначале задаем для логов свое имя и мыло
git gonfig --list
git config --global --list

git config --global user.name 'Sergy'
git config --global user.email 'pochta_61@mail.ru'


находясь в текущей паке мы должны "поселить" git
git itin
В этой попаке создается git-репозиторий - скрытая папка .git
Создается ветка Master

git status
Дает нам инфу по репозиторию


Для того, чтобы git не видел какие-то папки, нужно создать файл с пустым именем и расширением .gitignore
файл создаем с помощю Sublime Text
Добавляем в него через энтер /tmp  и т.д. т.е. те папки, которые гит не будет видеть.

Комманда add добавляет файли в staging area
git add .  (комаднда с точкой)
Чтобы убрать файлик (папку) из staging area (сделать его из зелененького красненьким)
юзаем команду
git reset HEAD index.html   (git reset HEAD <имя файла(папки)>)

после команды add 
git status
деет список файлов и папок зеленого цвета - это говорит о том, что эти файлы и папки могут быть закомиттены

commit - это добавление файлов в git репозиторий на постоянное хранение
git commit -a -m'сообщение'  (-m это ключ добавления комментария)

git status после этого говорит что все ок, коммитить пока нечего

git log  - дает информацию по коммитам
git log -p  - дает информацию по коммитам + что изменили
git log -2  - дает информацию по двум последним коммитам

git commit -a -m'Сообщение'   - это команда делает сразу add и commit

==================
GitHub

Созаем репозиторий
Чтобы привязать папку к репозиторию, делаем две команды

1) git remote add origin https://github.com/SergyB/study.git
(origin - это имя, можно сделать любое, например origin1)
(чтобы удалить результат команды юзаем git remote remove origin)

2)git push -u origin master

Все теперь командой 
git commit -a -m'сообщение'
git push
Закидываем на удаленный репозиторий.

========
Как сделать клон репозитория
В пустой папке команда
git clone https://github.com/SergyB/study.git


master & branch2
=======
Чтобы выталкивать изменения клона юзаем
git commit -a -m'сообщение'
git push

Чтобы апдейтить с githab юзаем
git pull


1

=====
Ветвления
Ветка - нужна для расширения т.е. ведется паралельная разработка от ветки master.
Т.е. мы работаем над одним и тем же файлом. При переключении в одной и тойже папке появляютя разные по содержанию одни и теже файлы.

При слиянии одно наложется на другое, поэтому нужно аккуратней.

git branch - показывает все ветки и ветку, на которой мы находимся

git branch branch2 - создаем ветку branch2
git branch -b branch3 - создаем ветку branch3 и сразу в нее переходим

git checkout branch2  - переключение между ветками
git branch -d branch2 - удаление ветки

git merge branch2 - слияние мастера и branch2 








